---
layout:     post
title:      "DFS求连通性"
subtitle:   ""
date:       2018-3-27 21:47:20
author:     "JL"
header-img: 
catalog: True
tags:
    - 算法
---

### DFS求连通性
AC了一道dfs题目，发现网上没有此题的解法，遂记录。  

给定一个方阵，定义连通：上下左右相邻，并且值相同。  
可以想象成一张地图，不同的区域被涂以不同颜色。  
输入：  
整数N, (N<50)表示矩阵的行列数  
接下来N行，每行N个字符，代表方阵中的元素  
接下来一个整数M，(M<1000)表示询问数  
接下来M行，每行代表一个询问，  
格式为4个整数，y1,x1,y2,x2，  
表示(第y1行,第x1列) 与 (第y2行,第x2列) 是否连通。  
连通输出true，否则false  

例如：  
10  
0010000000  
0011100000  
0000111110  
0001100010  
1111010010  
0000010010  
0000010011  
0111111000  
0000010000  
0000000000  
3  
0 0 9 9  
0 2 6 8  
4 4 4 6  

程序应该输出：  
false  
true  
true  

```cpp
#include<iostream>  
using namespace std;

char map[55][55];
int visit[55][55];
int n,m;

bool dfs(int y1,int x1,int y2,int x2){
	if(y1==y2 && x1==x2)return true;
	
	if(y1>0 && map[y1-1][x1]==map[y1][x1] && !visit[y1-1][x1]){
		visit[y1-1][x1] = 1;
		if(dfs(y1-1,x1,y2,x2)){
			visit[y1-1][x1] = 0;
			return true;
		}
	}
	if(y1<n && map[y1+1][x1]==map[y1][x1] && !visit[y1+1][x1]){
		visit[y1+1][x1] = 1;
		if(dfs(y1+1,x1,y2,x2)){
			visit[y1+1][x1] = 0;
			return true;
		}
	}
	if(x1>0 && map[y1][x1-1]==map[y1][x1] && !visit[y1][x1-1]){
		visit[y1][x1-1] = 1;
		if(dfs(y1,x1-1,y2,x2)){
			visit[y1][x1-1] = 0;
			return true;
		}
	}
	if(y1<n && map[y1][x1+1]==map[y1][x1] && !visit[y1][x1+1]){
		visit[y1][x1+1] = 1;
		if(dfs(y1,x1+1,y2,x2)){
			visit[y1][x1+1] = 0;
			return true;
		}
	}
	
	return false;
}

int main(){
	cin>>n;
	for(int i=0;i<n;i++){
		cin>>map[i];
	}
	cin>>m;
	char ques[m][4];
	for(int j=0;j<m;j++){
		for(int t=0;t<4;t++){
			cin>>ques[j][t];
		}
		int y1 = ques[j][0] - '0';
		int x1 = ques[j][1] - '0';
		int y2 = ques[j][2] - '0';
		int x2 = ques[j][3] - '0';
		if(dfs(y1,x1,y2,x2))cout<<"true"<<endl;
		else cout<<"false"<<endl;
	}
	return 0;
}
```